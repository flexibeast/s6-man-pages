.Dd August 23, 2020
.Dt S6-NOTIFYONCHECK 1
.Os
.Sh NAME
.Nm s6-notifyoncheck
.Nd implement a policy of running a user-provided executable in the background that polls the service currently being launched, in order to check when it becomes ready, and feed the result of this check into the s6 notification mechanism.
.Sh SYNOPSIS
.Nm
.Op Fl d
.Op Fl 3 Ar notiffd
.Op Fl s Ar initialsleep
.Op Fl T Ar globaltimeout
.Op Fl t Ar localtimeout
.Op Fl w Ar waitingtime
.Op Fl n Ar n
.Op Fl c Ar checkprog
.Ar prog...
.Sh DESCRIPTION
.Nm
is a chain-loading program meant to be used in run scripts, in a
service that has been declared to honor readiness notification.
.Pp
.Nm
should
.Sy only
be used with daemons that can be polled from the outside to check
readiness, and that
.Sy do not implement readiness notification themselves .
.Pp
.Nm
forks and runs as the child; the parent immediately execs into
.Ar prog... ,
the daemon that must be checked for readiness.
.Pp
.Nm
first waits for a little time, then it spawns the
.Pa ./data/check
executable and waits for it to exit. If
.Pa ./data/check
exits 0, then
.Nm
reports that the service is ready, then exits. If
.Pa ./data/check
exits anything else,
.Nm
sleeps for a little time, then spawns
.Pa ./data/check
again. It loops until
.Pa ./data/check
succeeds, or 7 attempts fail, or a certain amount of time elapses.
.Pp
.Nm
is designed to make it possible for services to use the s6
notification mechanism even with daemons that do not natively
implement the mechanism of writing a newline to a file descriptor of
their choice when they're ready.
.Pp
Polling is evil. Please make sure you really have no other choice before writing a
.Pa ./data/check
program and using
.Nm
in your run script. If you have access to the source code of the daemon you want to check for readiness, consider patching it to add readiness notification support, which is extremely simple and does not require linking against any s6 library.
.Pp
If using a
.Pa ./data/check
program is your only option:
.Bl -bullet -width x
.It
Make sure the
.Pa ./data
subdirectory is readable and that
.Pa ./data/check
is executable, exits 0 if the daemon it checks is ready, and exits
nonzero if the daemon is not ready.
.It
Add a
.Pa ./notification-fd
file to your service directory, which can contain any number that is
not 0, 1 or 2, or anything else explicitly used in your run
script. The daemon does not need to care about that file descriptor;
from the daemon's point of view, nothing changes.
.It
In your run script, insert
.Nm
in the command line that will execute into your daemon.
.It
.Pa ./data/check
will run as the same user as
.Nm .
If
.Nm
runs after the run script's process has lost its root privileges, make
sure that
.Pa ./data/check
is accessible and runnable as that user.
.It
Note that
.Nm
should be used to check if
.Em the current service itself
is running. You cannot use it to poll for the readiness of another service.
.El
.Sh OPTIONS
.Bl -tag -width x
.It Fl d
Doublefork.
.Nm
will run as the grandchild of
.Ar prog...
instead of its direct child. This is useful if
.Ar prog...
never reaps zombies it does not know it has.
.It Fl 3 Ar notiffd
Use
.Ar notiffd
as the file descriptor to send a readiness notification to. By
default, this number is automatically read from the
.Pa ./notification-fd
file.
.It Fl s Ar initialsleep
Sleep for
.Ar initialsleep
milliseconds before starting to poll the service for
readiness. Default is 10 milliseconds.
.It Fl T Ar globaltimeout
Give up (and leave the service up but not ready) if service readiness
still has not been detected after
.Ar globaltimeout
milliseconds. Default is 0, meaning infinite:
.Nm
will keep polling until it succeeds.
.It Fl t Ar localtimeout
On every attempt, if
.Pa ./data/check
still has not exited after
.Ar localtimeout
milliseconds, kill it and declare that attempt failed. Default is 0,
meaning infinite:
.Nm
will wait forever for
.Pa ./data/check
to exit.
.It Fl w Ar waitingtime
Sleep for
.Ar waitingtime
milliseconds between two invocations of
.Pa ./data/check .
This is basically the polling period. Default is 1000: the service
will be polled every second.
.It Fl n Ar n
Give up after
.Ar n
unsuccessful invocations of
.Pa ./data/check .
0 means infinite, i.e. keep polling until it succeeds, or times out,
or the service dies first. Default is 7.
.It Fl c Ar checkprog...
Invoke
.Ar checkprog...
instead of
.Pa ./data/check .
The
.Ar checkprog
string will be parsed by execlineb, so it can contain a full command
line. This option is mainly useful is the program used to poll the
service is very simple and can be inlined as a simple command line, to
avoid needing to manage a whole script and a
.Pa ./data/check
file. This option is only supported if the execline package is
installed; if it is not, the
.Fl c
option cannot be used and the checking script must always be placed in
.Pa ./data/check .
.El
.Sh EXIT STATUS
.Nm
can exit before executing into
.Ar prog :
.Bl -tag -width x
.It 100
Wrong usage.
.It 111
System call failed.
.El
.Pp
After forking,
.Nm
(running as the child) can exit with the following exit codes, but
those are meaningless because no process will, or should, check
them. They are only differentiated for clarity in the code:
.Bl -tag -width x
.It 0
Service readiness achieved and notification sent.
.It 1
Maximum number of attempts reached, all unsuccessful.
.It 2
.Ar prog
died, so
.Nm
exited early.
.It 3
Timed out before readiness was achieved.
.It 111
System call failed.
.El
.Sh SEE ALSO
.Xr s6-svscan 1 ,
.Xr s6-svscanctl 1 ,
.Xr s6-supervise 1 ,
.Xr s6-svc 1 ,
.Xr s6-svok 1 ,
.Xr s6-svstat 1 ,
.Xr s6-svwait 1 ,
.Xr s6-svlisten1 1 ,
.Xr s6-svlisten 1 ,
.Xr s6-svdt 1 ,
.Xr s6-svdt-clear 1 ,
.Xr s6-permafailon 1
.Pp
This man page is ported from the authoritative documentation at
.Lk http://skarnet.org/software/s6/ .
.Sh AUTHORS
.An Laurent Bercot
