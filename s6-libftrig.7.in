.Dd September 10, 2020
.Dt S6-LIBFTRIG 7
.Os
.Sh NAME
.Nm s6-libftrig
.Nd portable Unix C programming interface allowing a process
.Po
the
.Em subscriber
or
.Em listener
.Pc
to be instantly notified when another process
.Po
the
.Em notifier
or
.Em writer
.Pc
signals an event
.Sh DESCRIPTION
.Ss What is notification?
.Sy Notification vs. polling
.Pp
Process A is
.Em notified
of an event E when it gets a instant notice that event E has happened;
the notice may disrupt A's execution flow.
Notification is the opposite of
.Em polling ,
where A has to periodically (every T milliseconds) check whether E
happened and has no other way to be informed of it.
.Pp
Polling is generally considered bad practice - and is inferior to
notification in practically every case - for three reasons:
.Bl -bullet -width x
.It
Reaction time.
When event E happens, process A does not know it instantly.
It will only learn of E, and be able to react to it, when it
explicitly checks for E; and if E happened right after A performed the
check, this can take as long as T milliseconds
.Po the
.Em polling period
.Pc .
Polling processes have reaction delays due to the polling periods.
.It
Resource consumption.
Even if
.Em no
event ever happens, process A will still wake up needlessly every T
milliseconds.
This might not seem like a problem, but it is a serious one in
energy-critical environments.
Polling processes use more CPU time than is necessary and are not
energy-friendly.
.It
Conflict between the two above reasons.
The longer the polling period, the more energy-friendly the process,
but the longer the reaction time.
The shorter the polling period, the shorter the reaction time, but the
more resource-consuming the process.
A delicate balance has to be found, and acceptable behaviour is
different in every case, so there's no general rule of optimization.
.El
.Pp
Notification, on the other hand, is generally optimal: reaction time
is zero, and resource consumption is minimal - a process can sleep as
soon as it's not handling an event, and only wake up when needed.
.Pp
Of course, the problem of notification is that it's often more
difficult to implement.
Notification frameworks are generally more complex, involving lots of
asynchronism; polling is widely used because it's easy.
.Pp
.Sy Notifications and Unix
.Pp
Unix provides several frameworks so that a process B (or the kernel)
can notify process A.
.Bl -bullet -width x
.It
Signals.
The simplest Unix notification mechanism.
Sending events amounts to a
.Xr kill 2
call, and receiving events amounts to installing a signal handler
(preferrably using a self-pipe if mixing signals with an event
loop).
Unfortunately, Unix signals, even the more recent and powerful
real-time POSIX signals, have important limitations when it's about
generic notification:
.Bl -bullet -width x
.It
Non-root processes can only send signals to a very restricted and
implementation-dependent set of processes (roughly, processes with the
same UID).
This is a problem when designing secure programs that make use of Unix
privilege separation.
.It
You need to know the PID of a process to send it signals.
This is generally impractical; process management systems that do not
use supervisor processes have to do exactly that, and they resort to
unreliable, ugly hacks (.pid files) to track down process PIDs.
.El
.It
BSD-style IPCs, i.e. file descriptors to perform
.Xr select 2 /
.Xr poll 2
system calls on, in an
.Em asynchronous event loop .
This mechanism is very widely used, and rightly so, because it's
extremely generic and works in every ordinary situation; you have to
be doing very specific stuff to reach its limits.
If process A is reading on fd
.Va f ,
it is notified every time another process makes
.Va f
readable - for instance by writing a byte to the other end if
.Va f
is the reading end of a pipe.
And indeed, this is how
.Nm
works internally; but
.Nm
is needed because direct use of BSD-style IPCs also has limitations:
.Bl -bullet -width x
.It
Anonymous pipes are the simplest and most common BSD-style IPC.
If there is a pipe from process B to process A, then B can notify A by
writing to the pipe.
The limitation is that A and B must have a common ancestor that
created the pipe; two unrelated processes cannot communicate this way.
.It
Sockets are a good many-to-one notification system: once a server is
up, it can be notified by any client, and notify all its clients.
The limitation of sockets is that the server must be up before the
client, which prevents us from using them in a general notification
scheme.
.El
.It
System V IPCs, i.e. message queues and semaphores.
The interfaces to those IPCs are quite specific and can't mix with
select/poll loops, that's why nobody in their right mind uses them.
.El
.Pp
.Sy What we want
.Pp
We need a general framework to:
.Bl -bullet -width x
.It
allow an event-generating process to broadcast notifications to every
process that asked for one, without having to know their PIDs;
.It
allow a process to subscribe to a
.Dq notification channel
and be instantly, asynchronously notified when an event occurs on this
channel.
.El
.Pp
This requires a many-to-many approach that Unix does not provide
natively, and that is what
.Nm
does.
.Pp
.Sy That's what a bus is for. D-Bus already does all this.
.Pp
Yes, a bus is a good many-to-many notification mechanism
indeed.
However, a Unix bus can only be implemented via a daemon - you need a
long-running process, i.e. a
.Em service ,
to implement a bus.
And s6 is a
.Em supervision suite ,
i.e. a set of programs designed to manage services; we would like to
be able to use notifications in the supervision suite, to be able to
wait for a service to be up or down...
.Em without
relying on a particular service to be up.
.Nm
provides a notification mechanism that
.Em does not need
a bus service to be up; that's its main advantage over a bus.
.Pp
If you are not concerned with supervision and can depend on a bus
service, though, then yes, by all means, use a bus for your
notification needs.
There is a skabus project in the making, which aims to be simpler,
smaller and more maintainable than D-Bus.
.Ss How to use Nm
.Nm
is really a part of libs6: all the functions are implemented
in the
.Pa libs6.a
archive, or the
.Pa libs6.so
dynamic shared object.
However, the interfaces are different for notifiers and listeners:
.Bl -bullet -width x
.It
Notifiers use the
.Xr s6-ftrigw 7
interface.
.It
Listeners use the
.Xr s6-ftrigr 7
interface.
.El
.Sh SEE ALSO
.Xr s6-accessrules 7 ,
.Xr s6-fdholder 7 ,
.Xr s6-ftrigr 7 ,
.Xr s6-ftrigw 7 ,
.Xr s6-libs6 7 ,
.Xr s6-s6lock 7
.Pp
This man page is ported from the authoritative documentation at:
.Lk https://skarnet.org/software/s6/ftrig.html
.Sh AUTHORS
.An Laurent Bercot
.An Alexis Ao Mt flexibeast@gmail.com Ac (man page port)
