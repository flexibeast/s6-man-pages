.Dd September 29, 2021
.Dt S6-SVSCAN 8
.Os
.Sh NAME
.Nm s6-svscan
.Nd start and monitor a collection of
.Xr s6-supervise 8
processes
.Sh SYNOPSIS
.Nm
.Op Fl d Ar notif
.Op Fl X Ar consoleholder
.Op Fl c Ar max
.Op Fl t Ar rescan
.Op Ar scandir
.Sh DESCRIPTION
.Nm
starts and monitors a collection of
.Xr s6-supervise 8
processes, each of these processes monitoring a single service.
It is designed to be either the root or a branch of a
.Em supervision tree .
.Pp
If given a
.Ar scandir
argument,
.Nm
switches to it.
Else it uses its current directory as the
.Xr s6-scan-directory 7 .
.Pp
It exits 100 if another
.Nm s6-svscan
process is already monitoring this
.Xr s6-scan-directory 7 .
.Pp
If the
.Pa ./.s6-svscan
control directory does not exist,
.Nm
creates it.
However, it is recommended to already have a
.Pa .s6-svscan
subdirectory in your scan directory, because
it is used to configure
.Nm
operation, see below.
.Pp
From this point on,
.Nm s6-svscan
never dies.
It tries its best to keep control of what's happening.
In case of a major system call failure, which means that the kernel or
hardware is broken in some fashion, it executes into the
.Pa .s6-svscan/crash
program. (But if that execution fails,
.Nm
exits 111.)
.Pp
.Nm
performs an initial
.Em scan
of its scan directory.
.Pp
.Nm
then occasionally runs
.Em scans
or
.Em reaps ,
see below.
.Pp
.Nm
runs until it is told to stop via
.Xr s6-svscanctl 8 ,
or an appropriate signal (see below).
Then it executes into the
.Pa .s6-svscan/finish
program, if present; if not, it exits 0.
.Ss Signals
.Nm
has special handling for the following signals:
.Bl -tag -width x
.It Dv SIGCHLD
.It Dv SIGALRM
.It Dv SIGABRT
.It Dv SIGHUP
.It Dv SIGINT
.It Dv SIGTERM
.It Dv SIGQUIT
.It Dv SIGUSR1
.It Dv SIGUSR2
.It Dv SIGPWR
(on systems that support it)
.It Dv SIGWINCH
(on systems that support it)
.El
.Pp
Signals that are not in the above list are not caught by
.Nm
and will have the system's default effect.
.Pp
The behaviour for the first three signals in the list is always fixed:
.Bl -tag -width x
.It Dv SIGCHLD
trigger the reaper.
.It Dv SIGALRM
trigger the scanner.
.It Dv SIBABRT
immediately exec into
.Pa .s6-svscan/finish
(or exit 0 if that script does not exist), without waiting for any
processes to die.
.El
.Pp
The behaviour for the rest of the list is configurable: on receipt of a
.Ql SIGFOO ,
.Nm
will try to run an executable
.Pa .s6-svscan/SIGFOO
file.
For instance, an
.Pa .s6-svscan/SIGTERM
executable script will be run on receipt of a
.Dv SIGTERM .
If the file cannot be found, or cannot be executed for any reason, the
default behaviour for the signal will be applied.
Default behaviours are:
.Bl -tag -width x
.It Dv SIGHUP
Rescan and prune the supervision tree, i.e. make sure that new service
directories visible from the scan directory have an
.Xr s6-supervise 8
process running on them, and instruct
.Xr s6-supervise 8
processes running on service directories that have become invisible
from the scan directory to stop their service and exit.
This behaviour can also be achieved via the
.Ql s6-svscanctl -an Ar scandir
command.
This is the closest that
.Nm
can get to the traditional
.Dq reload your configuration
behaviour.
.It Dv SIGINT
same as
.Dv SIGTERM
below.
.It Dv SIGTERM
Instruct all the
.Xr s6-supervise 8
processes to stop their service and exit; wait for the whole
supervision tree to die, without losing any logs; then exec into
.Pa .s6-svscan/finish
or exit 0. This behaviour can also be achieved via the
.Ql s6-svscanctl -t Ar scandir
command.
.It Dv SIGQUIT
Same as
.Dv SIGTERM
above, except that if a service is logged (i.e. there is a
.Pa foo
service
.Em and
a
.Pa foo/log
service) then the logging service will also be killed, instead of
being allowed to exit naturally after its producer has flushed its
output and died.
This can solve problems with badly written logging programs, but it
can also cause loss of logs since the logger may die before the
producer has finished flushing everything.
The behaviour can also be achieved via the
.Ql s6-svscanctl -q Ar scandir
command; you should only use this if
.Dv SIGTERM Ns / Ns Fl t
fails to properly tear down the supervision tree.
.It Others
No effect if an appropriate executable file in
.Pa .s6-svscan/
cannot be run.
.El
.Ss The reaper
Upon receipt of a SIGCHLD, or an
.Ql s6-svscanctl -z
command,
.Nm
runs a
.Em reaper
routine.
.Pp
The reaper acknowledges (via some
.Fn wait
function), without blocking, every terminated child of
.Nm ,
even ones it does not know it has.
This is especially important when
.Nm
is run as process 1[1].
.Pp
If the dead child is an
.Xr s6-supervise 8
process watched by
.Nm ,
and the last scan flagged that process as active, then it is restarted
one second later.
.Ss The scanner
Upon receipt of a SIGALRM or a
.Ql s6-svscanctl -a
command,
.Nm
runs a
.Em scanner
routine. (It also runs it every
.Ar rescan
milliseconds if the
.Fl t
option has been given.)
.Pp
The scanner scans the current directory for subdirectories (or
symbolic links to directories), which must be service directories.
It skips names starting with dots.
It will not create services for more than
.Ar max
subdirectories.
.Pp
For every new subdirectory
.Ar dir
it finds, the scanner spawns an
.Xr s6-supervise 8
process on it.
If
.Sm off
.Ar dir
/log
.Sm on
exists, it spawns an
.Xr s6-supervise 8
process on both
.Ar dir
and
.Sm off
.Ar dir
/log,
.Sm on
and maintains a never-closing pipe from the service's stdout to
the logger's stdin.
This is
.Em starting the service ,
with or without a corresponding logger.
Every service the scanner finds is flagged as
.Dq active .
.Pp
The scanner remembers the services it found.
If a service has been started in an earlier scan, but the current scan
can't find the corresponding directory, the service is then flagged as
inactive.
No command is sent to stop inactive
.Xr s6-supervise 8
processes (unless the administrator uses
.Sm off
.Ql s6-svscanctl -n
or a
.Dv SIGHUP
.Sm on
), but inactive
.Xr s6-supervise 8
processes will not be restarted if they die.
.Ss Notes
.Bl -bullet -width x
.It
.Nm
is designed to run until the machine is shut down.
It is also designed as a suitable candidate for process 1.
So, it goes out of its way to stay alive, even in dire
situations.
When it encounters a fatal situation, something it really cannot
handle, it executes into
.Pa .s6-svscan/crash
instead of dying; when it is told to exit, it executes into
.Pa .s6-svscan/finish .
Administrators should make sure to design appropriate crash and finish
routines.
.It
.Nm
is a fully asynchronous state machine.
It will read and process commands at any time, even when the computer
is in trouble.
.It
.Nm
.Em does not use
.Xr malloc 3 .
That means it will
.Em never leak memory .
However,
.Nm s6-svscan uses
.Xr opendir 3 ,
and most
.Xr opendir 3
implementations internally use heap memory - so unfortunately, it's
impossible to guarantee that
.Nm
does not use heap memory at all.
.It
Unless run with a nonzero
.Fl t
option, which is only a legacy feature used to emulate other
supervision suites such as daemontools or runit,
.Nm
.Em never polls ;
it only wakes up on notifications.
The s6 supervision tree can be used in energy-critical environments.
.El
.Sh OPTIONS
.Bl -tag -width -x
.It Fl d Ar notif
Notify readiness on file descriptor
.Ar notif .
When
.Nm
is ready to accept commands from
.Xr s6-svscanctl 8 ,
it will write a newline to
.Ar notif .
.Ar notif
cannot be lesser than 3.
By default, no notification is sent.
Please note that using this option signals
.Em shallow readiness :
.Nm
being
.Dq ready
only means that it is ready to accept commands.
It
.Em does not mean
that all the services it launches at start are themselves ready, or
even started, or even that the relevant
.Xr s6-supervise 8
processes have been started.
If you need to test for
.Em deep readiness ,
meaning that all the services in the supervision tree have been
started and are ready, you cannot rely on this option.
.It Fl X Ar consoleholder
Assume the output console is available on descriptor
.Ar consoleholder .
If this option is given, and a s6-svscan-log service exists, the
.Xr s6-supervise 8
process for that service will be run with
.Ar consoleholder
as its standard error.
This is mainly useful for a setup done via s6-linux-init[2], where all
error messages go to the s6-svscan-log catch-all logger service by
default, except messages from this service itself, which fall back to
.Ar consoleholder .
If you're not sure what to use this option for, or how, you don't need it.
.It Fl c Ar max
Maintain services for up to max service directories.
Default is 500.
Lower limit is 2.
There is no upper limit, but:
.Bl -bullet -width x
.It
The higher
.Ar max
is, the more stack memory
.Nm
will use, approximately 50 bytes per service.
.It
.Nm
uses 2 file descriptors per logged service.
.El
.Pp
It is the admin's responsibility to make sure that
.Nm
has enough available descriptors to function properly and does not
exceed its stack limit.
The default of 500 is safe and provides enough room for every
reasonable system.
.It Fl t Ar rescan
perform a scan every
.Ar rescan
milliseconds.
If
.Ar rescan
is 0 (the default), automatic scans are never performed after the
first one and
.Nm
will only detect new services when told to via a
.Ql s6-svscanctl -a
command.
Use of this option is discouraged; it should only be given to emulate
the behaviour of other supervision suites.
.Po
.Ql -t5000
for daemontools' svscan,
.Ql -t14000
for runit's runsvdir.
.Pc
.El
.Sh SEE ALSO
.Xr s6-notifyoncheck 8 ,
.Xr s6-permafailon 8 ,
.Xr s6-supervise 8 ,
.Xr s6-svc 8 ,
.Xr s6-svdt 8 ,
.Xr s6-svdt-clear 8 ,
.Xr s6-svlisten 8 ,
.Xr s6-svlisten1 8 ,
.Xr s6-svok 8 ,
.Xr s6-svscanctl 8 ,
.Xr s6-svstat 8 ,
.Xr s6-svwait 8
.Pp
[1]
.Lk https://skarnet.org/software/s6/s6-svscan-1.html
.Pp
[2]
.Lk https://skarnet.org/software/s6-linux-init/
.Pp
This man page is ported from the authoritative documentation at:
.Lk https://skarnet.org/software/s6/s6-svscan.html
.Sh AUTHORS
.An Laurent Bercot
.An Alexis Ao Mt flexibeast@gmail.com Ac (man page port)
