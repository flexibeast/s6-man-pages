.Dd January 22, 2021
.Dt S6-NOTIFYWHENUP 7
.Os
.Sh NAME
.Nm s6-notifywhenup
.Nd s6 service startup notifications
.Sh DESCRIPTION
It is easy for a process supervision suite to know when a service that
was up is now down: the long-lived process implementing the service is
dead.
The supervisor, running as the daemon's parent, is instantly notified
via a SIGCHLD.
When it happens,
.Xr s6-supervise 1
sends a
.Sq d
event to its
.Pa ./event
.Xr s6-fifodir 7 ,
so every subscriber knows that the service is down.
All is well.
.Pp
It is much trickier for a process supervision suite to know when a
service that was down is now up.
The supervisor forks and execs the daemon, and knows when the exec has
succeeded; but after that point, it's all up to the daemon
itself.
Some daemons do a lot of initialization work before they're actually
ready to serve, and it is impossible for the supervisor to know
exactly when the service is really ready.
.Xr s6-supervise 1
sends a
.Sq u
event to its
.Pa ./event
.Xr s6-fifodir 7
when it successfully spawns the daemon, but any subscriber reacting to
.Sq u
is subject to a race condition - the service provided by the daemon
may not be ready yet.
.Pp
Reliable startup notifications need support from the daemons
themselves.
Daemons should do two things to signal the outside world that they are
ready:
.Bl -enum -width -x
.It
Update a state file, so other processes can get a snapshot of the
daemon's state.
.It
Send an event to processes waiting for a state change.
.El
.Pp
This is complex to implement in every single daemon, so s6 provides
tools to make it easier for daemon authors, without any need to link
against the s6 library or use any s6-specific construct: daemons can
simply write a line to a file descriptor of their choice, then close
that file descriptor, when they're ready to serve.
This is a generic mechanism that some daemons already implement.
.Pp
s6 supports that mechanism natively: when the service directory for
the daemon contains a valid
.Pa notification-fd
file, the daemon's supervisor, i.e. the
.Xr s6-supervise 1
program, will properly catch the daemon's message, update the status file
.Sm off
.Po
.Pa supervise/status
.Pc ,
.Sm on
then notify all the subscribers with a
.Sq U
event, meaning that the service is now up and ready.
.Pp
This method should really be implemented in every long-running program
providing a service.
When it is not the case, it's impossible to provide reliable startup
notifications, and subscribers should then be content with the
unreliable
.Sq u
events provided by
.Xr s6-supervise 1 .
.Pp
Unfortunately, a lot of long-running programs do not offer that
functionality; instead, they provide a way to poll them, an external
program that runs and checks whether the service is ready.
This is a bad mechanism, for several reasons.
Nevertheless, until all daemons are patched to notify their own
readiness, s6 provides a way to run such a check program to poll for
readiness, and route its result into the s6 notification system:
.Xr s6-notifyoncheck 1 .
.Ss How to use a check program with s6 (i.e. readiness checking via polling)
Let's say you have a daemon
.Pa foo ,
started under s6 via a
.Pa /run/service/foo
service directory, and that comes with a
.Pa foo-check
program that exhibits different behaviours when
.Pa foo
is ready and when it is not.
.Pp
Create an executable script
.Pa /run/service/foo/data/check
that calls
.Pa foo-check .
Make sure this script exits 0 when
.Pa foo
is ready and nonzero when it's not.
.Pp
In your
.Pa /run/service/foo/run
script that starts
.Pa foo ,
instead of executing into
.Pa foo ,
execute into
.Ql s6-notifyoncheck foo .
Read the
.Xr s6-notifyoncheck 1
page if you need to give it options to tune the polling.
.Pp
Run:
.Dl echo 3 > /run/service/foo/notification-fd
.Pp
If file descriptor 3 is already open when your run script executes
.Pa foo ,
replace
.Ql 3
with a file descriptor you
.Em know
is not already open.
.Pp
That's it.
.Pp
Your check script will be automatically invoked by
.Xr s6-notifyoncheck 1 ,
until it succeeds.
.Pp
.Xr s6-notifyoncheck 1 ,
will send the readiness notification to the file descriptor given in
the
.Pa notification-fd
file.
.Pp
.Xr s6-supervise 1
will receive it and will mark
.Pa foo
as ready.
.Ss How to design a daemon so it uses the s6 mechanism without resorting to polling (i.e. readiness notification)
The
.Xr s6-notifyoncheck 1
mechanism was made to accommodate daemons that provide a check program
but do not notify readiness themselves; it works, but is
suboptimal.
If you are writing the
.Pa foo
daemon, here is how you can make things better:
.Bl -bullet -width x
.It
Readiness notification should be optional, so you should guard all the
following with a run-time option to
.Pa foo .
.It
Assume a file descriptor other than 0, 1 or 2 is going to be open.
You can hardcode 3 (or 4); or you can make it configurable via a
command line option.
See for instance the
.Fl D Ar notif
option to the mdevd[1] program.
It really doesn't matter what this
number is; the important thing is that your daemon knows that this fd
is already open, and is not using it for another purpose.
.It
Do nothing with this file descriptor until your daemon is ready.
.It
When your daemon is ready, write a newline to this file descriptor.
.Bl -bullet -width x
.It
If you like, you may write other data before the newline, just in case
it is printed to the terminal.
It is not necessary, and it is best to keep that data short.
If the line is read by
.Xr s6-supervise 1 ,
it will be entirely ignored; only the newline is important.
.El
.It
Then close that file descriptor.
.El
.Pp
The user who then makes
.Pa foo
run under s6 just has to do the following:
.Bl -bullet -width x
.It
Write
.Ql 3 ,
or the file descriptor the
.Pa foo
daemon uses to notify readiness, to the
.Pa /run/service/foo/notification-fd
file.
.It
In the
.Pa /run/service/foo/run
script, invoke
.Pa foo
with the option that activates the readiness notification.
If
.Pa foo
makes the notification fd configurable, the user needs to make sure
that the number that is given to this option is the same as the number
that is written in the
.Pa notification-fd
file.
.It
And that is all.
.Sy \&Do not
use
.Xr s6-notifyoncheck 1
in this case, because you do not need to poll to know whether
.Pa foo
is ready; instead,
.Pa foo
will directly communicate its readiness to
.Xr s6-supervise 1 ,
and that is a much more efficient mechanism.
.El
.Ss What does Xr s6-supervise 1 do with this readiness information?
.Xr s6-supervise 1
maintains a readiness state for other programs to read.
You can check for it, for instance, via the
.Xr s6-svstat 1
program.
.Pp
.Xr s6-supervise 1
also broadcasts the readiness event to programs that are waiting for
it - for instance the
.Xr s6-svwait 1
program.
This can be used to make sure that other programs only start when the
daemon is ready.
For instance, the s6-rc[2] service manager uses that mechanism to
bring sets of services up or down: a service starts as soon as all its
dependencies are ready, but never earlier.
.Sh SEE ALSO
.Xr s6-notifyoncheck 1 ,
.Xr s6-permafailon 1 ,
.Xr s6-supervise 1 ,
.Xr s6-svc 1 ,
.Xr s6-svdt 1 ,
.Xr s6-svdt-clear 1 ,
.Xr s6-svlisten 1 ,
.Xr s6-svlisten1 1 ,
.Xr s6-svok 1 ,
.Xr s6-svscan 1 ,
.Xr s6-svscanctl 1 ,
.Xr s6-svstat 1 ,
.Xr s6-svwait 1
.Pp
[1]
.Lk https://skarnet.org/software/mdevd/mdevd.html
.Pp
[2]
.Lk https://skarnet.org/software/s6-rc/
.Pp
This man page is ported from the authoritative documentation at:
.Lk https://skarnet.org/software/s6/notifywhenup.html
.Sh AUTHORS
.An Laurent Bercot
.An Alexis Ao Mt flexibeast@gmail.com Ac (man page port)
