.Dd August 20, 2020
.Dt S6-FIFODIR 7
.Os
.Sh NAME
.Nm s6-fifodir
.Nd rendez-vous point between the notifier of certain events and its listeners. 
.Sh DESCRIPTION
An
.Nm
is implemented via a directory in the filesystem. No data is stored;
it is appropriate to create fifodirs in a RAM filesystem.
.Ss C API
For the notifier:
.Bl -bullet -width x
.It
You can create fifodirs via the
.Fn ftrigw_fifodir_create
function in
.Lb libftrig .
.It
You can send an event to a fifodir via the
.Fn ftrigw_notify
function in the notifier part of the
.Lb libftrig .
.It
You can clean up a fifodir via the
.Fn ftrigw_clean
function in
.Lb libftrig .
.It
You can destroy fifodirs via the
.Fn rm_rf
function in
.Lb libstddjb .
.El
.Pp
For a listener:
.Bl -bullet -width x
.It
You can subscribe to a fifodir via the
.Fn ftrigr_subscribe
function in the listener part of the
.Lb libftrig .
.It
Other functions in the
.Lb libftrig
allow you to receive and handle events synchronously or
asynchronously.
.El
.Ss Unix API
For the notifier:
.Bl -bullet -width x
.It
You can create fifodirs with the
.Xr s6-mkfifodir 1
command.
.It
You can send an event to a fifodir with the
.Xr s6-ftrig-notify 1
command.
.It
You can clean up a fifodir with the
.Xr s6-cleanfifodir 1
command.
.It
You can destroy fifodirs with the
.Ql rm -rf
command.
.El
.Pp
For a listener:
.Bl -bullet -width x
.It
You can subscribe to a fifodir and wait for an event, or a series or
events, with the
.Xr s6-ftrig-wait 1
command.
.It
You can subscribe to a fifodir, then trigger a program, then wait for
an event, with the
.Xr s6-ftrig-listen1 1
and
.Xr s6-ftrig-listen 1
commands. This makes it possible to only send a notification after
you're sure a notifier is actually listening, in order to prevent race
conditions.
.El
.Sh IMPLEMENTATION NOTES
.Bl -bullet -width x
.It
Notifiers and listeners agree on a fifodir.
.It
The fifodir directory is created by the notifier. It must be writable by listeners.
.It
To subscribe, a listener atomically creates a named pipe (FIFO) in
this directory and listens to the reading end. This named pipe must be
writable by the notifier.
.It
To send an event to listeners, the notifier writes the event byte to
all the named pipes in the directory. Credit for this idea goes to
Stefan Karrmann.
.It
To unsubscribe, a listener unlinks his named pipe from the directory.
.El 
.Pp
Note that in the s6 implementation of fifodirs, there are a few
additional details: for instance, the named pipes created in a fifodir
by a listener follow a strict naming convention, for efficiency and
safety reasons. If you are using fifodirs, it is recommended that you
use the provided C library functions or the
.Ql s6-ftrig-*
command line utilities instead of directly hacking into the fifodir
internals.
.Pp
Fifodirs are created by, so they always originally have the same uid
and gid as, their notifier. A notifier must be able to make his
fifodir either publicly accessible (anyone can subscribe) or
restricted (only a given group can subscribe).
.Pp
A publicly accessible fifodir must have rights 1733:
.Bl -bullet -width x
.It
Anyone can create a fifo in that fifodir.
.It
Only the notifier can see all the subscribers' fifos.
.It
A listener can only delete its own fifo.
.It
A notifier can delete any fifo for cleaning purposes.
.El
.Pp
A restricted fifodir must have the gid g of the group of allowed
listeners and have rights 3730. Unless the notifier is root, it must
be in the group of allowed listeners to be able to create such a
fifodir.
.Bl -bullet -width x
.It
Only members of g can create a fifo in that fifodir.
.It
Only the notifier can see all the subscribers' fifos.
.It
Fifos are always created with gid g.
.It
A listener can only delete its own fifo.
.It
A notifier can delete any fifo for cleaning purposes.
.El
.Pp
A named pipe in a fifodir must always belong to its listener and have
rights 0622:
.Bl -bullet -width x
.It
Only this listener can read on the fifo.
.It
Anyone who has reading rights on the fifodir (i.e. only the notifier)
can write to the fifo.
.El
.Pp
The libftrig interface takes care of all the subtleties. 
.Sh SEE ALSO
This man page is ported from the authoritative documentation at
.Lk http://skarnet.org/software/s6/ .
.Sh AUTHORS
.An Laurent Bercot
