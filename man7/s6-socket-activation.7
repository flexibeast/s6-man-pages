.Dd January 15, 2023
.Dt S6-SOCKET-ACTIVATION 7
.Os
.Sh NAME
.Nm s6-socket-activation
.Nd performing socket activation with s6
.Sh DESCRIPTION
First, it's important to realize that you don't
.Em need
socket activation.
It's a marketing word used by systemd advocates that mixes a couple
useful architecture concepts and several horrible ideas, for a very
minor speed benefit.
Read [1] and [2] for details.
.Bl -bullet -width x
.It
s6
.Em will not
help you implement super-servers in process 1, because doing so is bad
engineering.
However, it
.Em will
help you set up super-servers.
The
.Xr s6-ipcserver 8
program, for Unix domain sockets, as well as the
.Xr s6-tcpserver4 8
and
.Xr s6-tcpserver6 8
programs, for TCP INET domain sockets
.Po
available in the s6-networking package[3]
.Pc
are super-servers you can use to your heart's content.
They are even wrappers around simpler programs, and you can use their
components in the way you choose: bind sockets, drop privileges,
accept connections from clients, it's all about what you write in your
command line.
Super-servers are a good thing; using process 1 to act as a
super-server is not.
s6 provides you with the tools to get the good without the bad.
.It
s6
.Em will not
help you run all your services before their dependencies are met,
because doing so is
.Em very
bad engineering.
However, it
.Em will
provide you with:
.Bl -bullet -width x
.It
a reliable logging infrastructure, that makes sure your services
never lose logs:
.Xr s6-log 8 ,
in conjunction with
.Xr s6-supervise 8
and
.Xr s6-svscan 8 .
.It
ways to open your sockets and bind them as early as you want in your
boot process, and make them accept client connections later:
.Xr s6-ipcserver-socketbinder 8 ,
.Xr s6-tcpserver4-socketbinder 8
and
.Xr s6-tcpserver6-socketbinder 8 .
.It
a supervision infrastructure that can start as many services in
parallel as you want:
.Xr s6-supervise 8
and
.Xr s6-svscan 8 .
.El
.It
s6
.Em will not
help you centralize all your socket information in process 1, because
doing so is contrary to modularity and independence of services.
However, s6
.Em will
provide you with a way to store your open sockets and retrieve them
when you want, which it calls
.Dq fd holding :
.Xr s6-fdholder-daemon 8 .
.El
.Ss So, how do I open all my sockets first, store them, and dispatch them to daemons later?
Again, it's not necessary to do that: you'll be fine, and quite
speedy, just starting your daemons in their good time.
You
.Em will not
reap any noticeable benefit from performing
.Dq socket activation .
But if you really want to:
.Bl -enum -width x
.It
Make sure you have an early supervision infrastructure running.
Ideally, you would make
.Xr s6-svscan 8
your process 1 .
.It
Start an early fd-holding service, e.g.
.Xr s6-fdholder-daemon 8 .
Let's say the fd-holding daemon is listening on socket
.Pa /service/fdholder/s .
.It
For every Unix domain socket
.Pa /my/socket
you need to open, run:
.Bd -literal
s6-ipcserver-socketbinder /my/socket s6-fdholder-store /service/fdholder/s unix:/my/socket
.Ed
.Pp
You can do the same with INET domain sockets.
.It
Proceed to your initialization.
.It
When you want to run a daemon
.Ql myserverd
that accepts clients connecting to
.Pa /my/socket ,
run:
.Bd -literal
s6-fdholder-retrieve /service/fdholder/s unix:/my/socket myserverd
.Ed
.Pp
.Ql myserverd
will be executed with
.Pa /my/socket
as its standard input.
.It
The descriptors remain safely stored in the fd-holding daemon and you
can retrieve them again whenever you want, for instance when your
service crashes and is restarted.
.El
.Pp
That is all there is to it.
You don't have to use specific libraries or write complex unit files,
you just need to understand how a command line works.
This is Unix.
.Sh SEE ALSO
[1]
.Lk https://skarnet.org/lists/supervision/0422.html
.Pp
[2]
.Lk https://forums.gentoo.org/viewtopic-t-994548-postdays-0-postorder-asc-start-25.html#7581522
.Pp
[3]
.Lk https://skarnet.org/software/s6-networking/
.Sh AUTHORS
.An Laurent Bercot
.An Alexis Ao Mt flexibeast@gmail.com Ac (man page port)
