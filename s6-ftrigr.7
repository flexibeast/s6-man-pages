.Dd August 29, 2020
.Dt S6-FTRIGR 7
.Os
.Sh NAME
.Nm s6-ftrigr
.Nd API for listeners, i.e. programs that want to subscribe to
.Xr s6-fifodir 7 Ns
s and be instantly notified when the proper sequence of events happens.
.Sh DESCRIPTION
Check the
.Pa s6/ftrigr.h
header for the exact function prototypes.
.Pp
Make sure your application is not disturbed by children it doesn't
know it has. This means paying some attention to the SIGCHLD handler,
if any, and to the way you perform
.Xr waitpid 2 Ns
s. The best practice is to use a self-pipe to handle SIGCHLD (as well
as other signals the application needs to trap), and to always use
.Fn wait_nohang
to reap children, simply ignoring pids you don't know.
.Pp
If your application has trouble handling unknown children, consider
using an
.Xr s6-ftrigrd 1
service. (And fix your application!)
.Ss A programming example
The
.Pa src/pipe-tools/s6-ftrig-listen1.c
and
.Pa src/supervision/s6-svwait.c
files in the s6 package, for instance, illustrate how to use the
.Nm
library.
.Ss Synchronous functions with a specified maximum execution time
Synchronous functions take a
.Ql tain_t const * Po Va deadline Pc
parameter and a
.Ql tain_t * Po Va stamp Pc
parameter. Those are pointers to
.Vt tain_t
structures containing absolute times; the former represents a deadline
(in most cases, this time will be in the future) and the latter must
be an accurate enough timestamp. These structures can be filled using
the
.Ql tain_
primitives declared in
.Pa skalibs/tai.h .
.Pp
.Po
.Dq Accurate enough
means that
.Sy no blocking system call
must have been made since the last time
.Va stamp
was updated
.Po
by
.Ql tain_now Po Va &stamp Pc
.Pc .
It's a good policy to always update
.Va stamp
right after a (potentially) blocking system call like
.Xr select 2
returns. And unless the application is extremely CPU-intensive (think
calculus for physicists or astronomers) updating
.Va stamp
more frequently is unnecessary.
.Pc
.Pp
If such a synchronous function still hasn't returned when the deadline
occurs, then it will immediately return a failure code and set errno
to
.Dv ETIMEDOUT .
It is possible to pass null pointers to the function instead of pointers to
.Vt tain_t
structures, in which case the function will never timeout.
.Pp
If a timeout occurs, the library does not guarantee proper
interprocess communication later on; the application should either
die, or at least close the communication channel and open a new one.
.Pp
If any waiting occurred, the
.Va stamp
structure is automatically updated by the called function, so it
always represents an accurate enough estimation of the current
time. This allows the programmer to call several such functions in a
sequence without modifying the
.Va deadline
and
.Va stamp
parameters: then the whole sequence is bound in execution time.
.Pp
This is a general safety mechanism implemented in libunixonacid: in
interprocess communication, purely synchronous primitives are
dangerous because they make the calling process rely on proper
behaviour of the called process. Giving synchronous primitives the
ability to timeout allows developers to write reliable programs even
when interacting with software they have no control over.
.Ss Starting and ending a session
.Pp
.Bd -literal -offset indent
ftrigr_t a = FTRIGR_ZERO ;
tain_t deadline, stamp ;

tain_now(&stamp) ;
tain_addsec(&deadline, &stamp, 2)

// char const *path = FTRIGR_IPCPATH ;
// ftrigr_start(&a, path, &deadline, &stamp) ;
ftrigr_startf(&a, &deadline, &stamp) ;
.Ed
.Pp
.Fn ftrigr_start
starts a session with an
.Xr s6-ftrigrd 1
service listening on
.Va path .
.Pp
.Fn ftrigr_startf
starts a session with an
.Xr s6-ftrigrd 1
process as a child (which is the simplest usage).
.Pp
.Va a
is an
.Vt ftrigr_t
structure that must be declared in the stack and initialized to
.Dv FTRIGR_ZERO .
.Va stamp
must be an accurate enough timestamp.
.Pp
If the session initialization fails, the function returns 0 and errno
is set; else the function returns 1.
.Pp
If the absolute time
.Va deadline
is reached and the function has not returned yet, it immediately
returns 0 with errno set to
.Dv ETIMEDOUT .
Only local interprocess communications are involved; unless your
system is heavily overloaded, the function should return
near-instantly. One or two seconds of delay between
.Va stamp
and
.Va deadline
should be enough: if the function takes more than that to return, then
there is a problem with the underlying processes.
.Pp
You can have more than one session open in parallel, by declaring
several distinct
.Vt ftrigr_t
structures and calling
.Fn ftrigr_startf
.Po
or
.Fn ftrigr_start
.Pc
more than once. However, this is useless, since one single session can
handle virtually as many concurrent
.Xr s6-fifodir 7 Ns
s as your application needs.
.Bd -literal -offset indent
ftrigr_end(&a) ;
.Ed
.Pp
.Fn ftrigr_end
frees all the resources used by the session. The
.Va a
structure is then
reusable for another session.
.Ss Subscribing to an Xr s6-fifodir 7
.Bd -literal -offset indent
char const *path = "/var/lib/myservice/fifodir" ;
char const *re = "a.*b|c*d" ;
uint32_t options = 0 ;

uint16_t id = ftrigr_subscribe (&a, path, re, options, &deadline, &stamp) ;
.Ed
.Pp
.Fn ftrigr_subscribe
instructs the
.Xr s6-ftrigrd 1
daemon, related to the open session represented by the
.Va a
structure, to subscribe to the
.Va path
.Xr s6-fifodir 7 ,
and to notify the application when it receives a series of events that
matches the
.Va re
regexp.
.Va options
can be 0 or
.Dv FTRIGR_REPEAT .
If it is 0, the daemon will automatically unsubscribe from
.Va path
once
.Va re
has been matched by a series of events. If it is
.Dv FTRIGR_REPEAT ,
it will remain subscribed until told otherwise.
.Pp
.Fn ftrigr_subscribe
returns 0 and sets errno in case of failure, or a nonzero 16-bit
number identifying the subscription in case of success.
.Pp
.Fn ftrigr_subscribe
should return near-instantly, but if
.Va deadline
is reached, it will return 0
.Dv ETIMEDOUT .
If
.Fn ftrigr_subscribe
returns successfully, then the
.Xr s6-ftrigrd 1
daemon is guaranteed to be listening on
.Pa path ,
and events can be sent without the risk of a race condition.
.Ss Synchronously waiting for events
.Bd -literal -offset literal
uint16_t list[1] ;
unsigned int n = 1 ;
char trigger ;
list[0] = id ;

// r = ftrigr_wait_and(&a, list, n, &deadline) ;
r = ftrigr_wait_or(&a, list, n, &deadline, &trigger) ;
.Ed
.Pp
.Fn ftrigr_wait_and
waits for all the
.Va n
.Xr s6-fifodir 7 Ns s
whose ids are listed in
.Va list
to receive an event. It returns -1 in case of error or timeout, or a
non-negative integer in case of success.
.Pp
.Fn ftrigr_wait_or
waits for one of the
.Va n
.Xr s6-fifodir 7 Ns s
whose ids are listed in
.Va list
to receive an event. It returns -1 in case of error or timeout; if it
succeeds, the return value is the position in
.Va list ,
starting at 0, of the identifier that received an event; and
.Va trigger
is set to the character that triggered that event, i.e. the last
character of a sequence that matched the regular expression
.Va re
used in the subscription.
.Ss Asynchronously waiting for events
.Em (From now on, the functions are listed with their prototypes instead of usage examples.)
.Bl -tag -width x
.It Ql int ftrigr_fd (ftrigr_t const *a)
.Pp
Returns a file descriptor to select on for reading. Do not
.Xr read 2
it though.
.It Ql int ftrigr_updateb (ftrigr_t *a)
.Pp
Call this function whenever the fd checks readability: it will update
.Va a
.Ap
s internal structures with information from the
.Xr s6-ftrigrd 1
daemon. It returns -1 if an error occurs; in case of success, it
returns the number of identifiers for which something happened.
.Pp
When
.Fn ftrigr_updateb
returns,
.Ql genalloc_s(uint16_t, &a->list)
points to an array of
.Ql genalloc_len(uint16_t, &a->list)
16-bit unsigned integers. Those integers are ids waiting to be passed
to
.Fn ftrigr_check
or
.Fn ftrigr_checksa .
The number of ids already acknowledged is stored in
.Ql a->head ,
so the first unacknowledged id is
.Ql genalloc_s(uint16_t, &a->list)[a->head] .
.It Ql int ftrigr_check (ftrigr_t *a, uint16_t id, char *what)
.Pp
Checks whether an event happened to
.Va id .
Use after a call to
.Fn ftrigr_updateb .
.Bl -bullet -width x
.It
If an error occurred, returns -1 and sets errno. The error number may
have been transmitted from
.Xr s6-ftrigrd 1 .
.It
If no notification happened yet, returns 0.
.It
If something happened, writes the character that triggered the latest
notification into
.Va what
and returns the number of times that an event happened to this
identifier since the last call to
.Fn ftrigr_check .
.El
.It Ql int ftrigr_checksa (ftrigr_t *a, uint16_t id, stralloc *what)
.Pp
Checks whether an event happened to
.Va id .
Use after a call to
.Fn ftrigr_update ,
as an alternative to
.Fn ftrigr_check .
.Bl -bullet -width x
.It
If an error occurred, returns -1 and sets errno. The error number may
have been transmitted from
.Xr s6-ftrigrd 1 .
.It
If no notification happened yet, returns 0.
.It
If something happened, appends one character to the end of the
.Va what
stralloc for every time a notification was triggered since the last
call to
.Fn ftrigr_check .
Each character is the one that triggered a notification. The function
then returns 1.
.El
.It Ql int ftrigr_ack (ftrigr_t *a, size_t n)
.Pp
Acknowledges reading
.Va n
ids from the id list updated by
.Fn ftrigr_updateb .
.It Ql int ftrigr_update (ftrigr_t *a)
.Pp
Acknowledges all the pending ids (i.e. clears the stored id list) then calls
.Fn ftrigr_updateb .
.Sh SEE ALSO
.Xr s6-libs6 7 ,
.Xr s6-ftrigw 7 ,
.Xr s6-s6lock 7 ,
.Xr s6-accessrules 7 ,
.Xr s6-fdholder 7
.Pp
This man page is ported from the authoritative documentation at
.Lk http://skarnet.org/software/s6/ .
.Sh AUTHORS
.An Laurent Bercot
